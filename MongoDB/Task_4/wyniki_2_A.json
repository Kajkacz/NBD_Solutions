MongoDB shell version v4.4.4
connecting to: mongodb://127.0.0.1:27017/nbd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("c93af76b-99e4-4416-a6cc-ad1439cfa7c4") }
MongoDB server version: 4.4.4
{
	"_batch" : [
		{
			"_id" : "KGS",
			"credit_left" : 353655.58
		},
		{
			"_id" : "MAD",
			"credit_left" : 1021872.22
		},
		{
			"_id" : "VUV",
			"credit_left" : 46377.86
		},
		{
			"_id" : "BMD",
			"credit_left" : 10378
		},
		{
			"_id" : "USD",
			"credit_left" : 8173521.62
		},
		{
			"_id" : "TWD",
			"credit_left" : 75308
		},
		{
			"_id" : "CUP",
			"credit_left" : 1028827.76
		},
		{
			"_id" : "UZS",
			"credit_left" : 660619.22
		},
		{
			"_id" : "SGD",
			"credit_left" : 25640.96
		},
		{
			"_id" : "XPF",
			"credit_left" : 265852.02
		},
		{
			"_id" : "ISK",
			"credit_left" : 78097.48
		},
		{
			"_id" : "CLP",
			"credit_left" : 777240.28
		},
		{
			"_id" : "BOB",
			"credit_left" : 514867.08
		},
		{
			"_id" : "COP",
			"credit_left" : 3952389.58
		},
		{
			"_id" : "DZD",
			"credit_left" : 24332.4
		},
		{
			"_id" : "IQD",
			"credit_left" : 335063.64
		},
		{
			"_id" : "AZN",
			"credit_left" : 789760.34
		},
		{
			"_id" : "ALL",
			"credit_left" : 1303195.74
		},
		{
			"_id" : "NOK",
			"credit_left" : 1520227.22
		},
		{
			"_id" : "XAF",
			"credit_left" : 1472673.54
		},
		{
			"_id" : "XCD",
			"credit_left" : 336300.02
		},
		{
			"_id" : "PYG",
			"credit_left" : 573030.96
		},
		{
			"_id" : "ARS",
			"credit_left" : 3880694.48
		},
		{
			"_id" : "GTQ",
			"credit_left" : 1176737.7
		},
		{
			"_id" : "CVE",
			"credit_left" : 93077.02
		},
		{
			"_id" : "CAD",
			"credit_left" : 3946483.2
		},
		{
			"_id" : "MVR",
			"credit_left" : 64137.700000000004
		},
		{
			"_id" : "BIF",
			"credit_left" : 91564.66
		},
		{
			"_id" : "AOA",
			"credit_left" : 135165.6
		},
		{
			"_id" : "UGX",
			"credit_left" : 690406.5
		},
		{
			"_id" : "PEN",
			"credit_left" : 4713096.04
		},
		{
			"_id" : "NPR",
			"credit_left" : 293213.3
		},
		{
			"_id" : "BAM",
			"credit_left" : 831930.94
		},
		{
			"_id" : "DKK",
			"credit_left" : 444904.56
		},
		{
			"_id" : "STD",
			"credit_left" : 9708.72
		},
		{
			"_id" : "XOF",
			"credit_left" : 1868087.22
		},
		{
			"_id" : "LRD",
			"credit_left" : 109766.9
		},
		{
			"_id" : "SDG",
			"credit_left" : 254635.5
		},
		{
			"_id" : "LBP",
			"credit_left" : 86652.12
		},
		{
			"_id" : "TND",
			"credit_left" : 651511.8
		},
		{
			"_id" : "AUD",
			"credit_left" : 485334.06
		},
		{
			"_id" : "MWK",
			"credit_left" : 176213.66
		},
		{
			"_id" : "RWF",
			"credit_left" : 86599.92
		},
		{
			"_id" : "RON",
			"credit_left" : 23115.2
		},
		{
			"_id" : "SEK",
			"credit_left" : 7412442.0200000005
		},
		{
			"_id" : "KZT",
			"credit_left" : 1169846.4
		},
		{
			"_id" : "JPY",
			"credit_left" : 5169649.8
		},
		{
			"_id" : "MXN",
			"credit_left" : 3095346.18
		},
		{
			"_id" : "MDL",
			"credit_left" : 346637.46
		},
		{
			"_id" : "SLL",
			"credit_left" : 232449.8
		},
		{
			"_id" : "EUR",
			"credit_left" : 33400178.56
		},
		{
			"_id" : "GBP",
			"credit_left" : 487025.72
		},
		{
			"_id" : "TRY",
			"credit_left" : 36829.06
		},
		{
			"_id" : "ERN",
			"credit_left" : 43196.94
		},
		{
			"_id" : "ZWL",
			"credit_left" : 285957.72
		},
		{
			"_id" : "VEF",
			"credit_left" : 1258106.82
		},
		{
			"_id" : "FJD",
			"credit_left" : 18642.86
		},
		{
			"_id" : "ZMW",
			"credit_left" : 321881.06
		},
		{
			"_id" : "KRW",
			"credit_left" : 866994.12
		},
		{
			"_id" : "AMD",
			"credit_left" : 1205928.18
		},
		{
			"_id" : "MMK",
			"credit_left" : 446569.52
		},
		{
			"_id" : "CRC",
			"credit_left" : 669088.12
		},
		{
			"_id" : "MYR",
			"credit_left" : 1333067.3
		},
		{
			"_id" : "HKD",
			"credit_left" : 46046.04
		},
		{
			"_id" : "KPW",
			"credit_left" : 445037.26
		},
		{
			"_id" : "KWD",
			"credit_left" : 165012.14
		},
		{
			"_id" : "IDR",
			"credit_left" : 31239612.22
		},
		{
			"_id" : "SOS",
			"credit_left" : 164406.96
		},
		{
			"_id" : "IRR",
			"credit_left" : 1608794.1
		},
		{
			"_id" : "KMF",
			"credit_left" : 276009.4
		},
		{
			"_id" : "SAR",
			"credit_left" : 323412
		},
		{
			"_id" : "JMD",
			"credit_left" : 402895.42
		},
		{
			"_id" : "BWP",
			"credit_left" : 293944.08
		},
		{
			"_id" : "TJS",
			"credit_left" : 354802.1
		},
		{
			"_id" : "BND",
			"credit_left" : 15565.32
		},
		{
			"_id" : "KHR",
			"credit_left" : 200895.16
		},
		{
			"_id" : "TZS",
			"credit_left" : 1207711.98
		},
		{
			"_id" : "SBD",
			"credit_left" : 19966
		},
		{
			"_id" : "ZAR",
			"credit_left" : 1864927.32
		},
		{
			"_id" : "SSP",
			"credit_left" : 84513.06
		},
		{
			"_id" : "NGN",
			"credit_left" : 2564294.28
		},
		{
			"_id" : "KYD",
			"credit_left" : 33619.32
		},
		{
			"_id" : "YER",
			"credit_left" : 1167314.76
		},
		{
			"_id" : "BYR",
			"credit_left" : 1372979.68
		},
		{
			"_id" : "RUB",
			"credit_left" : 17064948.18
		},
		{
			"_id" : "MGA",
			"credit_left" : 755351.1
		},
		{
			"_id" : "LKR",
			"credit_left" : 450222.77999999997
		},
		{
			"_id" : "DJF",
			"credit_left" : 29468.54
		},
		{
			"_id" : "CHF",
			"credit_left" : 217881.28
		},
		{
			"_id" : "GEL",
			"credit_left" : 314553.92
		},
		{
			"_id" : "BRL",
			"credit_left" : 11219800
		},
		{
			"_id" : "GNF",
			"credit_left" : 146444.96
		},
		{
			"_id" : "MOP",
			"credit_left" : 10675.54
		},
		{
			"_id" : "NZD",
			"credit_left" : 676895.08
		},
		{
			"_id" : "LAK",
			"credit_left" : 172610.1
		},
		{
			"_id" : "RSD",
			"credit_left" : 1634807.08
		},
		{
			"_id" : "GYD",
			"credit_left" : 26107
		},
		{
			"_id" : "SYP",
			"credit_left" : 1002934.7
		},
		{
			"_id" : "MUR",
			"credit_left" : 364260.96
		},
		{
			"_id" : "CZK",
			"credit_left" : 5288422.32
		},
		{
			"_id" : "BHD",
			"credit_left" : 45396.92
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong("3616976943410818172"),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
